import 'dart:convert';

import 'package:cat_breeds/features/cat_breed/data/models/cat_weight_model.dart';
import 'package:cat_breeds/features/cat_breed/domain/entities/cat_breed_entity.dart';

List<CatBreedModel> catBreedsModelFromJson(String str) => List<CatBreedModel>.from(json.decode(str).map((x) => CatBreedModel.fromJson(x)));
CatBreedModel catBreedModelFromJson(String str) => CatBreedModel.fromJson(json.decode(str));

class CatBreedModel extends CatBreedEntity {
  const CatBreedModel({
    required CatWeightModel super.weight,
    required super.id,
    required super.name,
    required super.cfaUrl,
    required super.vetstreetUrl,
    required super.vcahospitalsUrl,
    required super.temperament,
    required super.origin,
    required super.countryCodes,
    required super.countryCode,
    required super.description,
    required super.lifeSpan,
    required super.indoor,
    required super.lap,
    required super.adaptability,
    required super.affectionLevel,
    required super.childFriendly,
    required super.catFriendly,
    required super.dogFriendly,
    required super.energyLevel,
    required super.grooming,
    required super.healthIssues,
    required super.intelligence,
    required super.sheddingLevel,
    required super.socialNeeds,
    required super.strangerFriendly,
    required super.vocalisation,
    required super.bidability,
    required super.experimental,
    required super.hairless,
    required super.natural,
    required super.rare,
    required super.rex,
    required super.suppressedTail,
    required super.shortLegs,
    required super.wikipediaUrl,
    required super.hypoallergenic,
    required super.referenceImageId,
    required super.altNames,
  });

  factory CatBreedModel.fromJson(Map<String, dynamic> json) => CatBreedModel(
    weight: CatWeightModel.fromJson(json["weight"]),
    id: json["id"] ?? "",
    name: json["name"] ?? "",
    cfaUrl: json["cfa_url"] ?? "",
    vetstreetUrl: json["vetstreet_url"] ?? "",
    vcahospitalsUrl: json["vcahospitals_url"] ?? "",
    temperament: json["temperament"] ?? "",
    origin: json["origin"] ?? "",
    countryCodes: json["country_codes"] ?? "",
    countryCode: json["country_code"] ?? "",
    description: json["description"] ?? "",
    lifeSpan: json["life_span"] ?? "",
    indoor: json["indoor"] ?? -1,
    lap: json["lap"] ?? -1,
    adaptability: json["adaptability"] ?? -1,
    affectionLevel: json["affection_level"] ?? -1,
    childFriendly: json["child_friendly"] ?? -1,
    catFriendly: json["cat_friendly"] ?? -1,
    dogFriendly: json["dog_friendly"] ?? -1,
    energyLevel: json["energy_level"] ?? -1,
    grooming: json["grooming"] ?? -1,
    healthIssues: json["health_issues"] ?? -1,
    intelligence: json["intelligence"] ?? -1,
    sheddingLevel: json["shedding_level"] ?? -1,
    socialNeeds: json["social_needs"] ?? -1,
    strangerFriendly: json["stranger_friendly"] ?? -1,
    vocalisation: json["vocalisation"] ?? -1,
    bidability: json["bidability"] ?? -1,
    experimental: json["experimental"] ?? -1,
    hairless: json["hairless"] ?? -1,
    natural: json["natural"] ?? -1,
    rare: json["rare"] ?? -1,
    rex: json["rex"] ?? -1,
    suppressedTail: json["suppressed_tail"] ?? -1,
    shortLegs: json["short_legs"] ?? -1,
    wikipediaUrl: json["wikipedia_url"] ?? -1,
    hypoallergenic: json["hypoallergenic"] ?? -1,
    referenceImageId: json["reference_image_id"] ?? "",
    altNames: json["alt_names"] ?? "",
  );
}